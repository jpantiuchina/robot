package com.mycompany.myapplication;import android.annotation.SuppressLint;import android.bluetooth.BluetoothAdapter;import android.bluetooth.BluetoothDevice;import android.bluetooth.BluetoothSocket;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.media.Ringtone;import android.media.RingtoneManager;import android.net.Uri;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.Menu;import android.view.MenuItem;import android.view.View;import java.io.IOException;import java.util.UUID;public class MainActivity extends AppCompatActivity{    private static final int REQUEST_ENABLE_BT = 546;    private static final String MY_DEVICE_NAME = "new-lenovo";//    private static final String MY_DEVICE_NAME = "HC-06";    BluetoothAdapter bluetoothAdapter;    BluetoothDevice device;    BluetoothSocket socket;    @Override    protected void onCreate(Bundle savedInstanceState)    {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();        if (bluetoothAdapter == null)            throw new RuntimeException("Device does not support bluetooth");        if (!bluetoothAdapter.isEnabled())        {            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);            startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);        }        IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);        registerReceiver(bluetoothDeviceFoundReceiver, filter);        if (bluetoothAdapter.isEnabled())            startDiscovery();    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data)    {        if (requestCode == REQUEST_ENABLE_BT)        {            if (resultCode == RESULT_OK)                startDiscovery();            else                throw new RuntimeException("Cannot work with disabled Bluetooth.");        }        super.onActivityResult(requestCode, resultCode, data);    }    @Override    protected void onDestroy()    {        if (socket != null)        {            try            {                socket.close();            }            catch (IOException e)            {                e.printStackTrace();            }        }        unregisterReceiver(bluetoothDeviceFoundReceiver);        super.onDestroy();    }    private void startDiscovery()    {        log("Searching for device " + MY_DEVICE_NAME);        bluetoothAdapter.startDiscovery();    }    private void bluetoothDeviceFound(BluetoothDevice device)    {        log("Found Bluetooth device " + device.getName() + " " + device.getAddress());        if (!MY_DEVICE_NAME.equals(device.getName()))            return;        bluetoothAdapter.cancelDiscovery(); // Save resources and prevent double connects        this.device = device;        log("Connecting to this device");        UUID uuid = device.getUuids()[0].getUuid();        System.err.println("Connecting to UUID " + uuid);        try        {            socket = device.createRfcommSocketToServiceRecord(uuid);        }        catch (IOException e)        {            throw new RuntimeException(e);        }        try        {            socket.connect();        }        catch (IOException e)        {            try            {                socket.close();            }            catch (IOException ignored)            {                // do nothing            }            throw new RuntimeException("Cannot connect", e);        }        log("Successfully connected");    }    public void turnLeft(View view)    {        Uri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);        Ringtone r = RingtoneManager.getRingtone(getApplicationContext(), notification);        r.play();    }    private void log(String s)    {        System.err.println(s);    }    private final BroadcastReceiver bluetoothDeviceFoundReceiver = new BroadcastReceiver()    {        @Override        public void onReceive(Context context, Intent intent)        {            BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);            bluetoothDeviceFound(device);        }    };}